// Copyright 2019 Tomas Machalek <tomas.machalek@gmail.com>
// Copyright 2019 Institute of the Czech National Corpus,
//                Faculty of Arts, Charles University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// fileselect functions are used to find proper KonText application log files
// based on logs processed so far. Please note that in recent KonText and
// Klogproc versions this is rather a fallback/offline functionality.

package alarm

import (
	"fmt"
	"klogproc/email"
	"strings"
	"sync"
	"time"

	"github.com/rs/zerolog/log"
)

type errorRecord struct {
	timestamp int64
	message   string
}

// findRange returns min and max value out of provided itemList
func findRange(itemList []errorRecord) (int64, int64) {
	min := itemList[0].timestamp
	max := itemList[0].timestamp
	for i := 1; i < len(itemList); i++ {
		if itemList[i].timestamp < min {
			min = itemList[i].timestamp
		}
		if itemList[i].timestamp > max {
			max = itemList[i].timestamp
		}
	}
	return min, max
}

// TailProcAlarm counts number of logged errors and if the total
// number during a defined time interval reaches a defined size,
// e-mail notification is triggered.
type TailProcAlarm struct {
	errCountTimeRangeSecs int
	notifier              email.MailNotifier
	lastErrors            []errorRecord
	errIdx                int
	fileInfo              tailFileDescriber
	mutex                 sync.Mutex
}

// OnError inserts timestamp of the error detection event.
func (tpa *TailProcAlarm) OnError(message string) {
	tpa.errIdx = (tpa.errIdx + 1) % len(tpa.lastErrors)
	tpa.lastErrors[tpa.errIdx] = errorRecord{timestamp: time.Now().Unix(), message: message}
}

// Evaluate looks for oldest and newest errors and if all
// the internal slots are full and the interval is smaller
// or equal of a defined value, an alarm e-mail is sent.
//
// TODO this function produces HTML message which won't be interpreted by Conomi properly
func (tpa *TailProcAlarm) Evaluate() {
	tpa.mutex.Lock()
	oldest, newest := findRange(tpa.lastErrors)
	if oldest > 0 && newest-oldest <= int64(tpa.errCountTimeRangeSecs) {
		msg := strings.Builder{}
		msg.WriteString(fmt.Sprintf("<p>Too many errors (%d) logged within file %s during defined interval of %d seconds:</p>",
			len(tpa.lastErrors), tpa.fileInfo.GetPath(), tpa.errCountTimeRangeSecs))

		var i int
		for i = len(tpa.lastErrors) - 1; i >= 0; i-- {
			if tpa.lastErrors[i].timestamp == oldest {
				break
			}
		}
		if i > -1 {
			msg.WriteString("<p><ul>\n")
			for j := 0; j < len(tpa.lastErrors); j++ {
				msg.WriteString(fmt.Sprintf("<li>%s</li>\n", tpa.lastErrors[i].message))
				i = (i + 1) % len(tpa.lastErrors)
			}
			msg.WriteString("</ul></p>")
		}

		msg.WriteString("<p>(this message was automatically generated by Klogproc)</p>")

		subj := fmt.Sprintf("Klogproc ERROR alarm for file %s (type %s)", tpa.fileInfo.GetPath(),
			tpa.fileInfo.GetAppType())
		log.Info().Msgf("sending alarm notification for %s", tpa.fileInfo.GetPath())
		err := tpa.notifier.SendNotification(subj, map[string]any{}, msg.String())
		if err != nil {
			log.Error().Err(err).Msg("")
		}
		tpa.Reset()
	}
	tpa.mutex.Unlock()
}

// Reset clears the whole state of the alarm.
func (tpa *TailProcAlarm) Reset() {
	tpa.mutex.Lock()
	for i := range tpa.lastErrors {
		tpa.lastErrors[i] = errorRecord{timestamp: 0, message: ""}
	}
	tpa.errIdx = 1
	tpa.mutex.Unlock()
}

// NewTailProcAlarm is a recommended factory for TailProcAlarm type
func NewTailProcAlarm(
	maxNumErr int,
	errCountTimeRangeSecs int,
	fileInfo tailFileDescriber,
	notifier email.MailNotifier,
) *TailProcAlarm {
	return &TailProcAlarm{
		notifier:              notifier,
		errCountTimeRangeSecs: errCountTimeRangeSecs,
		lastErrors:            make([]errorRecord, maxNumErr),
		errIdx:                1, // we want the interval to be super-long until all the slots in lastErrors are filled in
		fileInfo:              fileInfo,
	}
}
